---
# Tasks file for ludus_litterbox

- name: Gather Windows facts
  ansible.windows.setup:
    gather_subset:
      - env
      - platform
  tags:
    - always

- name: Check Windows version compatibility
  ansible.builtin.assert:
    that:
      - ansible_os_family == "Windows"
      - ansible_distribution_major_version | int >= 10 or ansible_distribution == "Microsoft Windows Server 2019" or ansible_distribution == "Microsoft Windows Server 2022"
    fail_msg: "This role requires Windows 10/11 or Server 2019/2022"
    success_msg: "Windows version is compatible"
  tags:
    - always

- name: Check if running as administrator
  ansible.windows.win_shell: |
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    if ($principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
      Write-Output "Administrator privileges confirmed"
      exit 0
    } else {
      Write-Output "Administrator privileges required"
      exit 1
    }
  register: admin_check
  when: ludus_litterbox_require_admin
  tags:
    - always

- name: Fail if not running as administrator
  ansible.builtin.fail:
    msg: "This role requires administrator privileges. Please run with elevated permissions."
  when:
    - ludus_litterbox_require_admin
    - admin_check.rc != 0
  tags:
    - always

# ADD: .NET Framework 3.5 Installation
- name: Install .NET Framework 3.5 on Windows Server
  ansible.windows.win_feature:
    name: NET-Framework-Core
    state: present
  when: "'Windows Server' in ansible_distribution"
  ignore_errors: yes
  tags:
    - dependencies

- name: Install .NET Framework 3.5 on Windows Desktop
  ansible.windows.win_optional_feature:
    name: NetFx3
    state: present
  when: "'Windows Server' not in ansible_distribution"
  ignore_errors: yes
  tags:
    - dependencies

- name: Check if Chocolatey is installed
  ansible.windows.win_shell: |
    try {
      choco --version
      exit 0
    } catch {
      exit 1
    }
  register: chocolatey_check
  ignore_errors: true
  when: ludus_litterbox_install_chocolatey
  tags:
    - chocolatey

- name: Install Chocolatey
  ansible.windows.win_shell: |
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
  when:
    - ludus_litterbox_install_chocolatey
    - chocolatey_check.rc != 0
  tags:
    - chocolatey

- name: Install LitterBox
  when: ludus_litterbox_install
  tags:
    - litterbox
    - install
  block:
    - name: Create LitterBox installation directory
      ansible.windows.win_file:
        path: "{{ ludus_litterbox_install_dir }}"
        state: directory

    - name: Disable Windows Defender 1
      ansible.windows.win_shell: 'Add-MpPreference -ExclusionPath C:\'
      ignore_errors: yes
      when: ludus_litterbox_disable_defender
      tags:
        - defender
        - dangerous

    - name: Disable Windows Defender 2
      ansible.windows.win_shell: |
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 1 -Type DWord
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableRealtimeMonitoring" -Value 1 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableBehaviorMonitoring" -Value 1 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableOnAccessProtection" -Value 1 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableScanOnRealtimeEnable" -Value 1 -Type DWord
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" -Name "SpynetReporting" -Value 0 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" -Name "SubmitSamplesConsent" -Value 2 -Type DWord
      ignore_errors: yes
      when: ludus_litterbox_disable_defender
      tags:
        - defender
        - dangerous

    - name: Check if Python is installed
      ansible.windows.win_shell: |
        try {
          $pythonVersion = python --version 2>&1
          if ($pythonVersion -match "Python (\d+\.\d+)") {
            $version = [version]$matches[1]
            if ($version -ge [version]"3.11") {
              Write-Output "Python $version found"
              exit 0
            }
          }
        } catch {}
        exit 1
      register: python_check
      ignore_errors: true
      when: ludus_litterbox_install_python

    - name: Download Python installer
      include_tasks: download_file.yml
      vars:
        file_name: "python-{{ ludus_litterbox_python_version }}-amd64.exe"
        file_url: "https://www.python.org/ftp/python/{{ ludus_litterbox_python_version }}/python-{{ ludus_litterbox_python_version }}-amd64.exe"
        file_dest: "{{ ludus_litterbox_install_dir }}\\python-installer.exe"
      when:
        - ludus_litterbox_install_python
        - python_check.rc != 0

    - name: Install Python
      ansible.windows.win_shell: |
        Start-Process -FilePath "{{ ludus_litterbox_install_dir }}\\python-installer.exe" `
          -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1", "Include_test=0" `
          -Wait -NoNewWindow
      when:
        - ludus_litterbox_install_python
        - python_check.rc != 0
      tags:
        - python
      notify:
        - restart python

    - name: Check if git is installed
      ansible.windows.win_shell: |
        try {
          git --version
          exit 0
        } catch {
          exit 1
        }
      register: git_check
      ignore_errors: true

    - name: Install Git using Chocolatey
      ansible.windows.win_shell: |
        if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
          choco install git -y --no-progress
        } else {
          Write-Output "Git already installed"
        }
      when: git_check.rc != 0

    # ADD: Install all required dependencies
    - name: Install Visual C++ and .NET dependencies
      ansible.windows.win_shell: |
        choco install vcredist-all -y --no-progress --ignore-package-exit-codes --force
        choco install dotnetfx -y --no-progress --ignore-package-exit-codes --force
        choco install visualstudio2022buildtools -y --no-progress --force
        choco install visualstudio2022-workload-vctools -y --no-progress --force
        choco install windows-sdk-10-version-2004-all -y --no-progress --force
      ignore_errors: true
      tags:
        - dependencies

    - name: Clone LitterBox repository
      ansible.windows.win_shell: |
        if (Test-Path "{{ ludus_litterbox_install_dir }}\\LitterBox") {
          cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
          git pull
        } else {
          cd "{{ ludus_litterbox_install_dir }}"
          git clone {{ ludus_litterbox_repo_url }}
        }

    - name: Create Python virtual environment
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        python -m venv venv
      args:
        creates: "{{ ludus_litterbox_install_dir }}\\LitterBox\\venv"

    - name: Install Python requirements
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        .\\venv\\Scripts\\pip.exe install --upgrade pip
        .\\venv\\Scripts\\pip.exe install -r requirements.txt
      register: pip_install
      retries: 3
      delay: 10

    - name: Create necessary directories
      ansible.windows.win_file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\config"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\uploads"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\results"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\temp"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\logs"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\database"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\tools"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\Scanners"
      tags:
        - directories

    - name: Download and setup analysis tools
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        # The LitterBox repository should include its own tools and scanners
        # Verify critical directories exist
        if (-not (Test-Path "Scanners")) {
          Write-Warning "Scanners directory missing - analysis tools may not work properly"
        }
        if (-not (Test-Path "Utils")) {
          Write-Warning "Utils directory missing - some features may be limited"
        }
        # Set execution policy for PowerShell scripts if needed
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
      tags:
        - tools

    - name: Create Windows Firewall rule for LitterBox
      community.windows.win_firewall_rule:
        name: "LitterBox Web Interface"
        localport: "{{ ludus_litterbox_port }}"
        action: allow
        direction: in
        protocol: tcp
        state: present
        enabled: yes
      when: ludus_litterbox_firewall_rule

    - name: Make required LitterBox config changes
      block:
        - name: Load existing LitterBox config.yaml
          ansible.builtin.slurp:
            src: "{{ ludus_litterbox_install_dir }}/LitterBox/config/config.yaml"
          register: raw_config

        - name: Decode and parse YAML
          ansible.builtin.set_fact:
            config_data: "{{ raw_config.content | b64decode | from_yaml }}"

        - name: Modify specific values in config_data
          ansible.builtin.set_fact:
            config_data: >-
              {{ config_data | combine({
                'application': {
                  'host': ludus_litterbox_host | string,
                  'port': ludus_litterbox_port | int
                },
                'utils': {
                  'allowed_extensions': ludus_litterbox_allowed_extensions
                }
              }, recursive=True) }}

        - name: Write updated config.yaml
          ansible.windows.win_copy:
            dest: "{{ ludus_litterbox_install_dir }}/LitterBox/config/config.yaml"
            content: "{{ config_data | to_nice_yaml }}"
            backup: true

    - name: Create batch file to start LitterBox
      ansible.windows.win_template:
        src: start_litterbox.bat.j2
        dest: "{{ ludus_litterbox_install_dir }}\\start_litterbox.bat"

    - name: Create desktop shortcut for LitterBox
      community.windows.win_shortcut:
        src: "{{ ludus_litterbox_install_dir }}\\start_litterbox.bat"
        dest: "C:\\Users\\Public\\Desktop\\LitterBox.lnk"
        icon: "{{ ludus_litterbox_install_dir }}\\LitterBox\\static\\favicon.ico,0"
        description: "LitterBox - Malware Analysis Sandbox"
        directory: "{{ ludus_litterbox_install_dir }}\\LitterBox"
      when: ludus_litterbox_desktop_shortcut

    - name: Create a scheduled task for LitterBox
      community.windows.win_scheduled_task:
        name: "LITTERBOX"
        description: "Start LitterBox on boot"
        actions:
          - path: "C:\\Tools\\LitterBox\\start_litterbox.bat"
            arguments: ""
        triggers:
          - type: boot
        username: "SYSTEM"
        run_level: highest
        state: present
        enabled: true
      when: ludus_litterbox_autostart

    - name: Download GrumpyCats client library
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        if (Test-Path "GrumpyCats") {
          cd GrumpyCats
          git pull
        } else {
          git clone https://github.com/BlackSnufkin/GrumpyCats.git
        }
      ignore_errors: true

    - name: Display installation complete message
      ansible.builtin.debug:
        msg:
          - "LitterBox has been successfully installed!"
          - "Installation directory: {{ ludus_litterbox_install_dir }}\\LitterBox"
          - "Web interface will run on default port when started"
          - "To start LitterBox:"
          - "  - Use the desktop shortcut 'LitterBox'"
          - "  - Or run: {{ ludus_litterbox_install_dir }}\\start_litterbox.bat"
          - "  - Or manually: cd {{ ludus_litterbox_install_dir }}\\LitterBox && .\\venv\\Scripts\\python.exe litterbox.py"
          - ""
          - "⚠️  SECURITY WARNING: LitterBox is designed for isolated testing environments only!"
          - "Do not use in production or on systems with sensitive data."
