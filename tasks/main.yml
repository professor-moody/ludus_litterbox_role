---
# Tasks file for ludus_litterbox

- name: Gather Windows facts
  ansible.windows.setup:
    gather_subset:
      - env
      - platform
  tags:
    - always

- name: Check Windows version compatibility
  ansible.builtin.assert:
    that:
      - ansible_os_family == "Windows"
      - ansible_distribution_major_version | int >= 10 or ansible_distribution == "Microsoft Windows Server 2019" or ansible_distribution == "Microsoft Windows Server 2022"
    fail_msg: "This role requires Windows 10/11 or Server 2019/2022"
    success_msg: "Windows version is compatible"
  tags:
    - always

- name: Check if running as administrator
  ansible.windows.win_shell: |
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    if ($principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
      Write-Output "Administrator privileges confirmed"
      exit 0
    } else {
      Write-Output "Administrator privileges required"
      exit 1
    }
  register: admin_check
  when: ludus_litterbox_require_admin
  tags:
    - always

- name: Fail if not running as administrator
  ansible.builtin.fail:
    msg: "This role requires administrator privileges. Please run with elevated permissions."
  when: 
    - ludus_litterbox_require_admin
    - admin_check.rc != 0
  tags:
    - always

# .NET Framework 3.5 Installation (BEFORE disabling Windows Update)
- name: Install .NET Framework 3.5 on Windows Server
  ansible.windows.win_feature:
    name: NET-Framework-Core
    state: present
    include_management_tools: yes
  when: "'Windows Server' in ansible_distribution"
  register: dotnet35_server
  tags:
    - dependencies
    - dotnet

- name: Install .NET Framework 3.5 on Windows Desktop
  ansible.windows.win_optional_feature:
    name: NetFx3
    state: present
  when: "'Windows Server' not in ansible_distribution"
  register: dotnet35_desktop
  tags:
    - dependencies
    - dotnet

- name: Verify .NET Framework 3.5 installation (fallback method)
  ansible.windows.win_shell: |
    # Check current state
    if ($env:OS -match "Windows_NT") {
      $osInfo = Get-WmiObject -Class Win32_OperatingSystem
      
      if ($osInfo.Caption -match "Server") {
        # Windows Server
        $feature = Get-WindowsFeature -Name NET-Framework-Core -ErrorAction SilentlyContinue
        if ($feature -and $feature.InstallState -eq "Installed") {
          Write-Output ".NET Framework 3.5 is installed"
          exit 0
        } else {
          Write-Output "Installing .NET Framework 3.5 on Server..."
          Install-WindowsFeature -Name NET-Framework-Core -IncludeAllSubFeature
        }
      } else {
        # Windows Desktop
        $feature = Get-WindowsOptionalFeature -Online -FeatureName NetFx3 -ErrorAction SilentlyContinue
        if ($feature -and $feature.State -eq "Enabled") {
          Write-Output ".NET Framework 3.5 is installed"
          exit 0
        } else {
          Write-Output "Installing .NET Framework 3.5 on Desktop..."
          Enable-WindowsOptionalFeature -Online -FeatureName NetFx3 -All -NoRestart
        }
      }
    }
  register: dotnet35_verify
  ignore_errors: true
  tags:
    - dependencies
    - dotnet

- name: Check if Chocolatey is installed
  ansible.windows.win_shell: |
    try {
      choco --version
      exit 0
    } catch {
      exit 1
    }
  register: chocolatey_check
  ignore_errors: true
  when: ludus_litterbox_install_chocolatey
  tags:
    - chocolatey

- name: Install Chocolatey
  ansible.windows.win_shell: |
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
  when: 
    - ludus_litterbox_install_chocolatey
    - chocolatey_check.rc != 0
  tags:
    - chocolatey

- name: Install LitterBox
  when: ludus_litterbox_install
  tags:
    - litterbox
    - install
  block:
    - name: Create LitterBox installation directory
      ansible.windows.win_file:
        path: "{{ ludus_litterbox_install_dir }}"
        state: directory

    - name: Disable Windows Defender 1
      ansible.windows.win_shell: 'Add-MpPreference -ExclusionPath C:\'
      ignore_errors: yes
      when: ludus_litterbox_disable_defender
      tags:
        - defender
        - dangerous

    - name: Disable Windows Defender 2
      ansible.windows.win_shell: |
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 1 -Type DWord
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableRealtimeMonitoring" -Value 1 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableBehaviorMonitoring" -Value 1 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableOnAccessProtection" -Value 1 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableScanOnRealtimeEnable" -Value 1 -Type DWord
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" -Force | Out-Null
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" -Name "SpynetReporting" -Value 0 -Type DWord
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" -Name "SubmitSamplesConsent" -Value 2 -Type DWord
      ignore_errors: yes
      when: ludus_litterbox_disable_defender
      tags:
        - defender
        - dangerous

    - name: Check if Python is installed
      ansible.windows.win_shell: |
        try {
          $pythonVersion = python --version 2>&1
          if ($pythonVersion -match "Python (\d+\.\d+)") {
            $version = [version]$matches[1]
            if ($version -ge [version]"3.11") {
              Write-Output "Python $version found"
              exit 0
            }
          }
        } catch {}
        exit 1
      register: python_check
      ignore_errors: true
      when: ludus_litterbox_install_python

    - name: Download Python installer
      include_tasks: download_file.yml
      vars:
        file_name: "python-{{ ludus_litterbox_python_version }}-amd64.exe"
        file_url: "https://www.python.org/ftp/python/{{ ludus_litterbox_python_version }}/python-{{ ludus_litterbox_python_version }}-amd64.exe"
        file_dest: "{{ ludus_litterbox_install_dir }}\\python-installer.exe"
      when: 
        - ludus_litterbox_install_python
        - python_check.rc != 0

    - name: Install Python
      ansible.windows.win_shell: |
        Start-Process -FilePath "{{ ludus_litterbox_install_dir }}\\python-installer.exe" `
          -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1", "Include_test=0" `
          -Wait -NoNewWindow
      when: 
        - ludus_litterbox_install_python
        - python_check.rc != 0
      tags:
        - python
      notify:
        - restart python

    - name: Check if git is installed
      ansible.windows.win_shell: |
        try {
          git --version
          exit 0
        } catch {
          exit 1
        }
      register: git_check
      ignore_errors: true

    - name: Install Git using Chocolatey
      ansible.windows.win_shell: |
        if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
          choco install git -y --no-progress
        } else {
          Write-Output "Git already installed"
        }
      when: git_check.rc != 0

    # Enhanced Dependencies Installation
    - name: Install all Visual C++ Redistributables
      ansible.windows.win_shell: |
        Write-Output "Installing Visual C++ Redistributables..."
        $packages = @(
          "vcredist-all",
          "vcredist140",
          "dotnetfx",
          "netfx-4.8"
        )
        
        foreach ($package in $packages) {
          Write-Output "Installing $package..."
          choco install $package -y --no-progress --ignore-package-exit-codes --force
        }
        
        Write-Output "Base redistributables installed"
      ignore_errors: true
      tags:
        - dependencies
        - vcredist

    - name: Install Visual Studio Build Tools with C++ Debug Libraries
      ansible.windows.win_shell: |
        # Check if debug DLLs already installed
        $debugDlls = @("MSVCP140D.dll", "VCRUNTIME140D.dll")
        $allPresent = $true
        
        foreach ($dll in $debugDlls) {
          $dllPath = "C:\Windows\System32\" + $dll
          if (-not (Test-Path $dllPath)) {
            $allPresent = $false
            Write-Output "$dll not found"
          }
        }
        
        if ($allPresent) {
          Write-Output "Debug DLLs already present"
          exit 0
        }
        
        # Install Visual Studio Build Tools
        Write-Output "Installing Visual Studio Build Tools..."
        choco install visualstudio2022buildtools -y --no-progress --force
        
        # Install C++ workload with debug libraries
        Write-Output "Installing C++ workload with debug libraries..."
        choco install visualstudio2022-workload-vctools -y --no-progress --force
        
        # Verify installation
        $stillMissing = @()
        foreach ($dll in $debugDlls) {
          $dllPath = "C:\Windows\System32\" + $dll
          if (-not (Test-Path $dllPath)) {
            $stillMissing += $dll
          }
        }
        
        if ($stillMissing.Count -eq 0) {
          Write-Output "Debug DLLs successfully installed"
        } else {
          Write-Warning "Still missing: $($stillMissing -join ', ')"
        }
      register: vs_build_tools_install
      ignore_errors: true
      tags:
        - dependencies
        - debug_runtime

    - name: Install Windows SDK for ucrtbased.dll
      ansible.windows.win_shell: |
        # Check if ucrtbased.dll is present
        if (Test-Path 'C:\Windows\System32\ucrtbased.dll') {
          Write-Output "ucrtbased.dll already present"
          exit 0
        }
        
        Write-Output "Installing Windows SDK..."
        
        # Try to install Windows SDK via Chocolatey
        choco install windows-sdk-10-version-2004-all -y --no-progress --force
        
        # Check if ucrtbased.dll was installed
        if (Test-Path 'C:\Windows\System32\ucrtbased.dll') {
          Write-Output "ucrtbased.dll successfully installed"
        } else {
          # Try to find and copy from Windows Kits installation
          $searchPaths = @(
            'C:\Program Files (x86)\Windows Kits\10\bin\*\x64\ucrt\ucrtbased.dll',
            'C:\Program Files (x86)\Microsoft Visual Studio\*\*\VC\Redist\*\debug_nonredist\x64\*\ucrtbased.dll'
          )
          
          $found = $false
          foreach ($path in $searchPaths) {
            $files = Get-ChildItem -Path $path -ErrorAction SilentlyContinue
            if ($files) {
              Copy-Item $files[0].FullName -Destination 'C:\Windows\System32\' -Force
              Write-Output "Copied ucrtbased.dll from Windows Kits"
              $found = $true
              break
            }
          }
          
          if (-not $found) {
            Write-Warning "ucrtbased.dll could not be installed - RedEdr may not function"
          }
        }
      register: windows_sdk_install
      ignore_errors: true
      tags:
        - dependencies
        - sdk

    - name: Verify all debug dependencies
      ansible.windows.win_shell: |
        Write-Output "Verifying debug runtime dependencies..."
        
        $requiredDlls = @(
          "MSVCP140D.dll",
          "VCRUNTIME140D.dll",
          "ucrtbased.dll"
        )
        
        $missing = @()
        $present = @()
        
        foreach ($dll in $requiredDlls) {
          $dllPath = "C:\Windows\System32\" + $dll
          if (Test-Path $dllPath) {
            $present += $dll
          } else {
            $missing += $dll
          }
        }
        
        if ($present.Count -gt 0) {
          Write-Output "Found: $($present -join ', ')"
        }
        
        if ($missing.Count -gt 0) {
          Write-Warning "Missing: $($missing -join ', ')"
          Write-Warning "Some analysis tools (like RedEdr.exe) may not function properly"
        } else {
          Write-Output "All debug runtime dependencies are installed!"
        }
      register: debug_deps_verify
      tags:
        - dependencies
        - verify

    - name: Clone LitterBox repository
      ansible.windows.win_shell: |
        if (Test-Path "{{ ludus_litterbox_install_dir }}\\LitterBox") {
          cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
          git pull
        } else {
          cd "{{ ludus_litterbox_install_dir }}"
          git clone {{ ludus_litterbox_repo_url }}
        }

    - name: Create Python virtual environment
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        python -m venv venv
      args:
        creates: "{{ ludus_litterbox_install_dir }}\\LitterBox\\venv"

    - name: Install Python requirements
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        .\\venv\\Scripts\\pip.exe install --upgrade pip
        .\\venv\\Scripts\\pip.exe install -r requirements.txt
      register: pip_install
      retries: 3
      delay: 10

    - name: Create necessary directories
      ansible.windows.win_file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\config"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\uploads"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\results"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\temp"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\logs"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\database"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\tools"
        - "{{ ludus_litterbox_install_dir }}\\LitterBox\\Scanners"
      tags:
        - directories

    - name: Download and setup analysis tools
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        # The LitterBox repository should include its own tools and scanners
        # Verify critical directories exist
        if (-not (Test-Path "Scanners")) {
          Write-Warning "Scanners directory missing - analysis tools may not work properly"
        }
        if (-not (Test-Path "Utils")) {
          Write-Warning "Utils directory missing - some features may be limited"
        }
        # Set execution policy for PowerShell scripts if needed
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
      tags:
        - tools

    - name: Handle RedEdr.exe debug dependency issues
      ansible.windows.win_shell: |
        $redEdrPath = "{{ ludus_litterbox_install_dir }}\\LitterBox\\Scanners\\RedEdr.exe"
        
        if (Test-Path $redEdrPath) {
          # Check if all debug DLLs are present
          $requiredDlls = @("MSVCP140D.dll", "VCRUNTIME140D.dll", "ucrtbased.dll")
          $missing = @()
          
          foreach ($dll in $requiredDlls) {
            $dllPath = "C:\Windows\System32\" + $dll
            if (-not (Test-Path $dllPath)) {
              $missing += $dll
            }
          }
          
          if ($missing.Count -gt 0) {
            Write-Warning "RedEdr.exe is missing debug libraries: $($missing -join ', ')"
            Write-Warning "RedEdr.exe may not function properly"
            
            # Optionally disable RedEdr if debug libs are missing
            if ($missing.Count -eq 3) {
              # All debug libs missing, probably won't work at all
              # Rename-Item -Path $redEdrPath -NewName "RedEdr.exe.disabled" -Force
              # Write-Warning "RedEdr.exe has been disabled due to missing dependencies"
              Write-Warning "Consider disabling RedEdr.exe if it continues to cause issues"
            }
          } else {
            Write-Output "RedEdr.exe dependencies verified"
          }
        }
      ignore_errors: true
      tags:
        - tools
        - verify

    - name: Create Windows Firewall rule for LitterBox
      community.windows.win_firewall_rule:
        name: "LitterBox Web Interface"
        localport: "{{ ludus_litterbox_port }}"
        action: allow
        direction: in
        protocol: tcp
        state: present
        enabled: yes
      when: ludus_litterbox_firewall_rule

    - name: Create batch file to start LitterBox
      ansible.windows.win_template:
        src: start_litterbox.bat.j2
        dest: "{{ ludus_litterbox_install_dir }}\\start_litterbox.bat"

    - name: Create desktop shortcut for LitterBox
      community.windows.win_shortcut:
        src: "{{ ludus_litterbox_install_dir }}\\start_litterbox.bat"
        dest: "C:\\Users\\Public\\Desktop\\LitterBox.lnk"
        icon: "{{ ludus_litterbox_install_dir }}\\LitterBox\\static\\favicon.ico,0"
        description: "LitterBox - Malware Analysis Sandbox"
        directory: "{{ ludus_litterbox_install_dir }}\\LitterBox"
      when: ludus_litterbox_desktop_shortcut

    - name: Download GrumpyCats client library
      ansible.windows.win_shell: |
        cd "{{ ludus_litterbox_install_dir }}\\LitterBox"
        if (Test-Path "GrumpyCats") {
          cd GrumpyCats
          git pull
        } else {
          git clone https://github.com/BlackSnufkin/GrumpyCats.git
        }
      ignore_errors: true

    - name: Display installation complete message
      ansible.builtin.debug:
        msg:
          - "LitterBox has been successfully installed!"
          - "Installation directory: {{ ludus_litterbox_install_dir }}\\LitterBox"
          - "Web interface will run on default port when started"
          - "To start LitterBox:"
          - "  - Use the desktop shortcut 'LitterBox'"
          - "  - Or run: {{ ludus_litterbox_install_dir }}\\start_litterbox.bat"
          - "  - Or manually: cd {{ ludus_litterbox_install_dir }}\\LitterBox && .\\venv\\Scripts\\python.exe litterbox.py"
          - ""
          - "Debug Dependencies Status:"
          - "{{ debug_deps_verify.stdout_lines | default(['Not checked']) | join('\n') }}"
          - ""
          - "⚠️  SECURITY WARNING: LitterBox is designed for isolated testing environments only!"
          - "Do not use in production or on systems with sensitive data."

# Optional: Disable Windows Updates (for isolated lab environments only)
- name: Disable Windows Update (LAB ENVIRONMENT ONLY)
  ansible.windows.win_shell: |
    Write-Warning "Disabling Windows Update for isolated lab environment"
    
    # Create registry keys if they don't exist
    if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate")) {
      New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Force | Out-Null
    }
    if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
      New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    
    # Disable automatic updates
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Value 1 -Type DWord -Force
    
    # Stop and disable Windows Update service
    Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
    Set-Service -Name wuauserv -StartupType Disabled
    
    Write-Output "Windows Update has been disabled"
  when: ludus_litterbox_disable_windows_update | default(false)
  tags:
    - updates
    - dangerous
